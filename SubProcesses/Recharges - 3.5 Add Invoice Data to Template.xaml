<Activity mc:Ignorable="sap sap2010" x:Class="AfterResume" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="in_strInvoiceFilePath" Type="InArgument(x:String)" />
    <x:Property Name="in_strMaxQtyDescription" Type="InArgument(x:String)" />
    <x:Property Name="in_strTemplatePath" Type="InArgument(x:String)" />
  </x:Members>
  <this:AfterResume.in_strMaxQtyDescription>
    <InArgument x:TypeArguments="x:String" />
  </this:AfterResume.in_strMaxQtyDescription>
  <this:AfterResume.in_strTemplatePath>
    <InArgument x:TypeArguments="x:String" />
  </this:AfterResume.in_strTemplatePath>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1410.4,2707.2</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>AfterResume_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Text.Json.Nodes</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Collections.Specialized</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>UiPath.Core.Activities.Storage</x:String>
      <x:String>UiPath.Core.Activities.Orchestrator</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>UiPath.UIAutomationNext.Activities</x:String>
      <x:String>UiPath.Platform.ObjectLibrary</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Core.Activities.SAP</x:String>
      <x:String>UiPath.UIAutomationNext.Contracts</x:String>
      <x:String>UiPath.UIAutomationNext.Models.CV</x:String>
      <x:String>UiPath.UIAutomationNext.Triggers</x:String>
      <x:String>UiPath.Platform.Triggers</x:String>
      <x:String>UiPath.UIAutomationNext.Activities.Triggers</x:String>
      <x:String>UiPath.Platform.Triggers.Scope</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
      <x:String>UiPath.PDF.Activities</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Persistence.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>System.Text.Json</AssemblyReference>
      <AssemblyReference>netstandard</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Collections.Specialized</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>System.CodeDom</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>UiPath.PDF.Activities</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="" DisplayName="Recharges - 3.4 Add Invoice Data to Template" sap:VirtualizedContainerService.HintSize="655.2,2642.4" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="dtInvoiceData" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtActiveList" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtDescriptionSheet" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:ExcelApplicationScope Password="{x:Null}" SensitivityLabel="{x:Null}" DisplayName="Excel Application Scope - TMC" sap:VirtualizedContainerService.HintSize="592.8,281.6" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_3" InstanceCachePeriod="3000" SensitivityOperation="None" WorkbookPath="[in_strTemplatePath]">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="449.6,172" sap2010:WorkflowViewState.IdRef="Sequence_4">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelReadRange AddHeaders="True" DataTable="[dtActiveList]" DisplayName="Read Range - Active List" sap:VirtualizedContainerService.HintSize="387.2,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_9" Range="[in_Config(&quot;ActiveListReadRange&quot;).ToString]" SheetName="[in_Config(&quot;ActiveListSheetName&quot;).ToString]">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:ExcelReadRange>
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ExcelApplicationScope>
    <ui:ExcelApplicationScope Password="{x:Null}" SensitivityLabel="{x:Null}" DisplayName="Excel Application Scope - Invoice " sap:VirtualizedContainerService.HintSize="592.8,1828" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_1" InstanceCachePeriod="3000" SensitivityOperation="None" WorkbookPath="[in_strInvoiceFilePath]">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="559.2,1718.4" sap2010:WorkflowViewState.IdRef="Sequence_2">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Switch x:TypeArguments="x:String" DisplayName="Switch Description" Expression="[in_strMaxQtyDescription]" sap:VirtualizedContainerService.HintSize="496.8,386.4" sap2010:WorkflowViewState.IdRef="Switch`1_4">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:ExcelReadRange x:Key="Monthly user fee" AddHeaders="True" DataTable="[dtInvoiceData]" DisplayName="Read Range Monthly user fee" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_2" SheetName="[in_Config(&quot;listOfShortDescriptions&quot;).ToString.split(&quot;,&quot;)(0)]">
                <ui:ExcelReadRange.Range>
                  <InArgument x:TypeArguments="x:String">
                    <Literal x:TypeArguments="x:String" Value="" />
                  </InArgument>
                </ui:ExcelReadRange.Range>
              </ui:ExcelReadRange>
              <ui:ExcelReadRange x:Key="VAT Reporting" AddHeaders="True" DataTable="[dtInvoiceData]" DisplayName="Read Range VAT Reporting" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_3" SheetName="[in_Config(&quot;listOfShortDescriptions&quot;).ToString.split(&quot;,&quot;)(1)]">
                <ui:ExcelReadRange.Range>
                  <InArgument x:TypeArguments="x:String">
                    <Literal x:TypeArguments="x:String" Value="" />
                  </InArgument>
                </ui:ExcelReadRange.Range>
              </ui:ExcelReadRange>
              <ui:ExcelReadRange x:Key="Cash iQ Product" AddHeaders="True" DataTable="[dtInvoiceData]" DisplayName="Read Range Cah IQ" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_4" SheetName="[in_Config(&quot;listOfShortDescriptions&quot;).ToString.split(&quot;,&quot;)(2)]">
                <ui:ExcelReadRange.Range>
                  <InArgument x:TypeArguments="x:String">
                    <Literal x:TypeArguments="x:String" Value="" />
                  </InArgument>
                </ui:ExcelReadRange.Range>
              </ui:ExcelReadRange>
              <ui:ExcelReadRange x:Key="Casual User Scheme" AddHeaders="True" DataTable="[dtInvoiceData]" DisplayName="Read Range Casual User Scheme" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_5" SheetName="[in_Config(&quot;listOfShortDescriptions&quot;).ToString.split(&quot;,&quot;)(3)]">
                <ui:ExcelReadRange.Range>
                  <InArgument x:TypeArguments="x:String">
                    <Literal x:TypeArguments="x:String" Value="" />
                  </InArgument>
                </ui:ExcelReadRange.Range>
              </ui:ExcelReadRange>
              <ui:ExcelReadRange x:Key="DVLA Licence checks" AddHeaders="True" DataTable="[dtInvoiceData]" DisplayName="Read Range DVLA Licence checks" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_6" SheetName="[in_Config(&quot;listOfShortDescriptions&quot;).ToString.split(&quot;,&quot;)(4)]">
                <ui:ExcelReadRange.Range>
                  <InArgument x:TypeArguments="x:String">
                    <Literal x:TypeArguments="x:String" Value="" />
                  </InArgument>
                </ui:ExcelReadRange.Range>
              </ui:ExcelReadRange>
              <ui:ExcelReadRange x:Key="Receipt Checking - Pay &amp; Reclaim" AddHeaders="True" DataTable="[dtInvoiceData]" DisplayName="Read Range Receipt Checking - Pay &amp; Reclaim" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_7" SheetName="[in_Config(&quot;listOfShortDescriptions&quot;).ToString.split(&quot;,&quot;)(5)]">
                <ui:ExcelReadRange.Range>
                  <InArgument x:TypeArguments="x:String">
                    <Literal x:TypeArguments="x:String" Value="" />
                  </InArgument>
                </ui:ExcelReadRange.Range>
              </ui:ExcelReadRange>
              <ui:ExcelReadRange x:Key="Visa to Drive" AddHeaders="True" DataTable="[dtInvoiceData]" DisplayName="Read Range Visa to Drive" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_8" SheetName="[in_Config(&quot;listOfShortDescriptions&quot;).ToString.split(&quot;,&quot;)(6)]">
                <ui:ExcelReadRange.Range>
                  <InArgument x:TypeArguments="x:String">
                    <Literal x:TypeArguments="x:String" Value="" />
                  </InArgument>
                </ui:ExcelReadRange.Range>
              </ui:ExcelReadRange>
            </Switch>
            <ui:InvokeCode ContinueOnError="{x:Null}" Code="For Each row As datarow In io_dtInvoiceData.Rows&#xD;&#xA;If row(&quot;Cost Centre&quot;).tostring = &quot;(blank)&quot;&#xD;&#xA;&#x9;If in_dtActiveList.AsEnumerable.Any(Function(x) x(&quot;Personnel Number&quot;).ToString.ToLower.Trim = row(&quot;First Name&quot;).ToString.ToLower.Trim+&quot; &quot;+row(&quot;Last Name&quot;).ToString.ToLower.Trim)&#xD;&#xA;&#x9;&#x9;row(&quot;Cost Centre&quot;) = in_dtActiveList.AsEnumerable.Where(Function(x)  x(&quot;Personnel Number&quot;).ToString.ToLower.Trim = row(&quot;First Name&quot;).ToString.ToLower.Trim+&quot; &quot;+row(&quot;Last Name&quot;).ToString.ToLower.Trim).CopyToDataTable.Rows.Item(0)(&quot;CC to use for recharge&quot;).ToString&#xD;&#xA;&#x9;End If&#xD;&#xA;&#x9;If row(&quot;Last Name&quot;).ToString = &quot;Demo&quot;&#xD;&#xA;&#x9;&#x9;row(&quot;Cost Centre&quot;) = 990005&#xD;&#xA;&#x9;End if&#xD;&#xA;End If&#xD;&#xA;If row(&quot;Cost Centre&quot;).ToString &lt;&gt; &quot;(blank)&quot;&#xD;&#xA;&#x9;Select Case row(&quot;Cost Centre&quot;).ToString&#xD;&#xA;    &#x9;Case &quot;990244&quot;&#xD;&#xA;        &#x9;row(&quot;Cost Centre&quot;) = &quot;990003&quot;&#xD;&#xA;    &#x9;Case &quot;990010&quot;&#xD;&#xA;         &#x9;row(&quot;Cost Centre&quot;) = &quot;990210&quot;&#xD;&#xA;    &#x9;Case &quot;990030&quot;&#xD;&#xA;        &#x9;row(&quot;Cost Centre&quot;) = &quot;990003&quot;&#xD;&#xA;    &#x9;Case &quot;A16000&quot;&#xD;&#xA;        &#x9;row(&quot;Cost Centre&quot;) = &quot;990061&quot;&#xD;&#xA;&#x9;&#x9;Case &quot;277055&quot;&#xD;&#xA;         &#x9;row(&quot;Cost Centre&quot;) = &quot;277005&quot;&#xD;&#xA;&#x9;&#x9;Case &quot;H16010&quot;&#xD;&#xA;         &#x9;row(&quot;Cost Centre&quot;) = &quot;H10610&quot;&#xD;&#xA;&#x9;End Select&#x9;&#xD;&#xA;End If&#xD;&#xA;If io_dtInvoiceData.Columns.Contains(&quot;Total&quot;)&#xD;&#xA;&#x9;row(&quot;Total&quot;) = &quot;&quot;&#xD;&#xA;Else&#xD;&#xA;&#x9;row(&quot;Fee&quot;) = &quot;&quot;&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;Next&#xD;&#xA;" DisplayName="Populate CC identified, Name identified and CC comments" sap:VirtualizedContainerService.HintSize="496.8,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
              <ui:InvokeCode.Arguments>
                <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dtInvoiceData">[dtInvoiceData]</InOutArgument>
                <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtActiveList">[dtActiveList]</InArgument>
              </ui:InvokeCode.Arguments>
            </ui:InvokeCode>
            <ui:InvokeCode ContinueOnError="{x:Null}" Code="io_dtInvoiceData.columns.Add(&quot;Mileage capture ( all except casual)&quot;)&#xD;&#xA;io_dtInvoiceData.columns.Add(&quot;Cash IQ (Cash allowance Fuel Card)&quot;)&#xD;&#xA;io_dtInvoiceData.columns.Add(&quot;Pay and Reclaim ( Cash allowance pay &amp; reclaim)&quot;)&#xD;&#xA;io_dtInvoiceData.columns.Add(&quot;Visa to drive ( Cash allowance FC  + casual)&quot;)&#xD;&#xA;io_dtInvoiceData.columns.Add(&quot;Casual user&quot;)&#xD;&#xA;io_dtInvoiceData.columns.Add(&quot;VAT Reporting (all)&quot;)&#xD;&#xA;io_dtInvoiceData.columns.Add(&quot;DVLA Checks&quot;)" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="496.8,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_4">
              <ui:InvokeCode.Arguments>
                <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dtInvoiceData">
                  <VisualBasicReference x:TypeArguments="sd:DataTable" ExpressionText="dtInvoiceData" />
                </InOutArgument>
              </ui:InvokeCode.Arguments>
            </ui:InvokeCode>
            <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="496.8,542.4" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[in_Config(&quot;listOfShortDescriptions&quot;).ToString.Split(&quot;,&quot;)]">
              <ui:ForEach.Body>
                <ActivityAction x:TypeArguments="x:String">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="x:String" Name="shortDescription" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="376.8,354.4" sap2010:WorkflowViewState.IdRef="Sequence_5">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:ExcelReadRange Range="{x:Null}" AddHeaders="True" DataTable="[dtDescriptionSheet]" DisplayName="Read Range Description sheet" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_10" SheetName="[shortDescription]" />
                    <ui:InvokeCode ContinueOnError="{x:Null}" Code="For Each row As datarow In in_dtDescription.Rows&#xD;&#xA;Dim targetRow As DataRow = io_dtInvoiceData.AsEnumerable().FirstOrDefault(Function(x) x(&quot;First Name&quot;).ToString = row(&quot;First Name&quot;).ToString And x(&quot;Last Name&quot;).ToString = row(&quot;Last Name&quot;).ToString)&#xD;&#xA;If targetRow IsNot Nothing Then&#xD;&#xA;&#x9;Select Case in_strShortDescription&#xD;&#xA;    &#x9;Case &quot;Monthly User Fee&quot;&#xD;&#xA;        &#x9;targetRow(&quot;Mileage capture ( all except casual)&quot;) = in_dtDescription.AsEnumerable.Where(Function(x) x(&quot;First Name&quot;).ToString = row(&quot;First Name&quot;).ToString And x(&quot;Last Name&quot;).ToString = row(&quot;Last Name&quot;).ToString).CopyToDataTable.rows(0)(&quot;Fee&quot;).ToString&#xD;&#xA;    &#x9;Case &quot;VAT Reporting&quot;&#xD;&#xA;         &#x9;targetRow(&quot;VAT Reporting (all)&quot;) = in_dtDescription.AsEnumerable.Where(Function(x) x(&quot;First Name&quot;).ToString = row(&quot;First Name&quot;).ToString And x(&quot;Last Name&quot;).ToString = row(&quot;Last Name&quot;).ToString).CopyToDataTable.rows(0)(&quot;Total&quot;).ToString&#xD;&#xA;    &#x9;Case &quot;Cash IQ&quot;&#xD;&#xA;        &#x9;targetRow(&quot;Cash IQ (Cash allowance Fuel Card)&quot;) = in_dtDescription.AsEnumerable.Where(Function(x) x(&quot;First Name&quot;).ToString = row(&quot;First Name&quot;).ToString And x(&quot;Last Name&quot;).ToString = row(&quot;Last Name&quot;).ToString).CopyToDataTable.rows(0)(&quot;Fee&quot;).ToString&#xD;&#xA;    &#x9;Case &quot;Casual User Scheme&quot;&#xD;&#xA;        &#x9;targetRow(&quot;Casual user&quot;) = in_dtDescription.AsEnumerable.Where(Function(x) x(&quot;First Name&quot;).ToString = row(&quot;First Name&quot;).ToString And x(&quot;Last Name&quot;).ToString = row(&quot;Last Name&quot;).ToString).CopyToDataTable.rows(0)(&quot;Fee&quot;).ToString&#xD;&#xA;&#x9;&#x9;Case &quot;DVLA Licence checks&quot;&#xD;&#xA;         &#x9;targetRow(&quot;DVLA Checks&quot;) = in_dtDescription.AsEnumerable.Where(Function(x) x(&quot;First Name&quot;).ToString = row(&quot;First Name&quot;).ToString And x(&quot;Last Name&quot;).ToString = row(&quot;Last Name&quot;).ToString).CopyToDataTable.rows(0)(&quot;Fee&quot;).ToString&#xD;&#xA;&#x9;&#x9;Case &quot;Pay &amp; Reclaim&quot;&#xD;&#xA;         &#x9;targetRow(&quot;Pay and Reclaim ( Cash allowance pay &amp; reclaim)&quot;) =  in_dtDescription.AsEnumerable.Where(Function(x) x(&quot;First Name&quot;).ToString = row(&quot;First Name&quot;).ToString And x(&quot;Last Name&quot;).ToString = row(&quot;Last Name&quot;).ToString).CopyToDataTable.rows(0)(&quot;Total&quot;).ToString&#xD;&#xA;&#x9;&#x9;Case &quot;VISA 2 DRIVE&quot;&#xD;&#xA;&#x9;&#x9;&#x9;targetRow(&quot;Visa to drive ( Cash allowance FC  + casual)&quot;) = in_dtDescription.AsEnumerable.Where(Function(x) x(&quot;First Name&quot;).ToString = row(&quot;First Name&quot;).ToString And x(&quot;Last Name&quot;).ToString = row(&quot;Last Name&quot;).ToString).CopyToDataTable.rows(0)(&quot;Fee&quot;).ToString&#xD;&#xA;&#x9;End Select&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;Next&#xD;&#xA;" DisplayName="Populate CC identified, Name identified and CC comments" sap:VirtualizedContainerService.HintSize="333.6,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_3">
                      <ui:InvokeCode.Arguments>
                        <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dtInvoiceData">
                          <VisualBasicReference x:TypeArguments="sd:DataTable" ExpressionText="dtInvoiceData" />
                        </InOutArgument>
                        <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtDescription">
                          <VisualBasicValue x:TypeArguments="sd:DataTable" ExpressionText="dtDescriptionSheet" />
                        </InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_strShortDescription">
                          <VisualBasicValue x:TypeArguments="x:String" ExpressionText="shortDescription" />
                        </InArgument>
                      </ui:InvokeCode.Arguments>
                    </ui:InvokeCode>
                  </Sequence>
                </ActivityAction>
              </ui:ForEach.Body>
            </ui:ForEach>
            <ui:RemoveDataColumn Column="{x:Null}" ColumnName="{x:Null}" ColumnIndex="3" DataTable="[dtInvoiceData]" DisplayName="Remove Data Column Parent Name" sap:VirtualizedContainerService.HintSize="496.8,188" sap2010:WorkflowViewState.IdRef="RemoveDataColumn_3" />
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
    </ui:ExcelApplicationScope>
    <ui:ExcelApplicationScope Password="{x:Null}" SensitivityLabel="{x:Null}" DisplayName="Excel Application Scope - TMC template" sap:VirtualizedContainerService.HintSize="592.8,309.6" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_2" InstanceCachePeriod="3000" SensitivityOperation="None" WorkbookPath="[in_strTemplatePath]">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="449.6,200" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelWriteRange AddHeaders="False" DataTable="[dtInvoiceData]" DisplayName="Write Range - Inv" sap:VirtualizedContainerService.HintSize="387.2,88" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_30" SheetName="[in_Config(&quot;InvSheetName&quot;).ToString]" StartingCell="[in_Config(&quot;InvRange&quot;).ToString]" />
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
    </ui:ExcelApplicationScope>
  </Sequence>
</Activity>